<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/luisbaena/prodentclient/presentation/ui/components/AppNavigationDrawer.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/luisbaena/prodentclient/presentation/ui/components/AppNavigationDrawer.kt" />
              <option name="originalContent" value="package dev.luisbaena.prodentclient.presentation.ui.components&#10;&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import dev.luisbaena.prodentclient.R&#10;import dev.luisbaena.prodentclient.domain.model.User&#10;import dev.luisbaena.prodentclient.presentation.ui.navigation.adminDrawerNavItems&#10;import dev.luisbaena.prodentclient.presentation.ui.navigation.drawerNavItems&#10;import dev.luisbaena.prodentclient.presentation.viewmodel.AuthViewModel&#10;&#10;/**&#10; * Navigation Drawer Simple de la aplicación&#10; */&#10;@Composable&#10;fun AppNavigationDrawer(&#10;    navController: NavController,&#10;    authViewModel: AuthViewModel,&#10;    onCloseDrawer: () -&gt; Unit = {},&#10;    isDrawerOpen: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    val user = uiState.user&#10;&#10;    ModalDrawerSheet(&#10;        modifier = modifier,&#10;        drawerContainerColor = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            DrawerHeader(user = user)&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                thickness = 1.dp,&#10;                color = MaterialTheme.colorScheme.outlineVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Items de usuario&#10;            drawerNavItems.forEach { item -&gt;&#10;                val selected = currentRoute == item.route&#10;&#10;                NavigationDrawerItem(&#10;                    icon = {&#10;                        Icon(&#10;                            imageVector = if (selected) item.selectedIcon else item.unselectedIcon,&#10;                            contentDescription = item.title&#10;                        )&#10;                    },&#10;                    label = {&#10;                        Text(&#10;                            text = item.title,&#10;                            style = MaterialTheme.typography.titleMedium&#10;                        )&#10;                    },&#10;                    selected = selected,&#10;                    onClick = {&#10;                        navController.navigate(item.route) {&#10;                            launchSingleTop = true&#10;                        }&#10;                        onCloseDrawer()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                    colors = NavigationDrawerItemDefaults.colors(&#10;                        selectedContainerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        selectedIconColor = MaterialTheme.colorScheme.primary,&#10;                        selectedTextColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Items de administración (solo si es admin)&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Text(&#10;                    text = &quot;ADMINISTRACIÓN&quot;,&#10;                    style = MaterialTheme.typography.labelLarge,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.padding(horizontal = 28.dp, vertical = 8.dp)&#10;                )&#10;&#10;                adminDrawerNavItems.forEach { item -&gt;&#10;                    val selected = currentRoute == item.route&#10;&#10;                    NavigationDrawerItem(&#10;                        icon = {&#10;                            Icon(&#10;                                imageVector = if (selected) item.selectedIcon else item.unselectedIcon,&#10;                                contentDescription = item.title&#10;                            )&#10;                        },&#10;                        label = {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.titleMedium&#10;                            )&#10;                        },&#10;                        selected = selected,&#10;                        onClick = {&#10;                            navController.navigate(item.route) {&#10;                                launchSingleTop = true&#10;                            }&#10;                            onCloseDrawer()&#10;                        },&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                        colors = NavigationDrawerItemDefaults.colors(&#10;                            selectedContainerColor = MaterialTheme.colorScheme.errorContainer,&#10;                            selectedIconColor = MaterialTheme.colorScheme.error,&#10;                            selectedTextColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                thickness = 1.dp,&#10;                color = MaterialTheme.colorScheme.outlineVariant&#10;            )&#10;        }&#10;    }&#10;&#10;/**&#10; * Cabecera del Drawer - Con imagen local&#10; */&#10;@Composable&#10;private fun DrawerHeader(user: User?) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primary)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Avatar grande con imagen desde drawable&#10;        Box(&#10;            modifier = Modifier&#10;                .size(90.dp)&#10;                .clip(CircleShape)&#10;                .background(MaterialTheme.colorScheme.primary),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Imagen desde drawable&#10;            Image(&#10;                painter = painterResource(id = R.drawable.ic_splash_logo),&#10;                contentDescription = &quot;Avatar&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(5.dp))&#10;    }&#10;}" />
              <option name="updatedContent" value="package dev.luisbaena.prodentclient.presentation.ui.components&#10;&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.currentBackStackEntryAsState&#10;import dev.luisbaena.prodentclient.R&#10;import dev.luisbaena.prodentclient.domain.model.User&#10;import dev.luisbaena.prodentclient.presentation.ui.navigation.drawerNavItems&#10;import dev.luisbaena.prodentclient.presentation.viewmodel.AuthViewModel&#10;&#10;/**&#10; * Navigation Drawer Simple de la aplicación&#10; */&#10;@Composable&#10;fun AppNavigationDrawer(&#10;    navController: NavController,&#10;    authViewModel: AuthViewModel,&#10;    onCloseDrawer: () -&gt; Unit = {},&#10;    isDrawerOpen: Boolean = false,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val navBackStackEntry by navController.currentBackStackEntryAsState()&#10;    val currentRoute = navBackStackEntry?.destination?.route&#10;&#10;    val uiState by authViewModel.uiState.collectAsState()&#10;    val user = uiState.user&#10;&#10;    ModalDrawerSheet(&#10;        modifier = modifier,&#10;        drawerContainerColor = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            DrawerHeader(user = user)&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                thickness = 1.dp,&#10;                color = MaterialTheme.colorScheme.outlineVariant&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            // Items del menú&#10;            drawerNavItems.forEach { item -&gt;&#10;                val selected = currentRoute == item.route&#10;&#10;                NavigationDrawerItem(&#10;                    icon = {&#10;                        Icon(&#10;                            imageVector = if (selected) item.selectedIcon else item.unselectedIcon,&#10;                            contentDescription = item.title&#10;                        )&#10;                    },&#10;                    label = {&#10;                        Text(&#10;                            text = item.title,&#10;                            style = MaterialTheme.typography.titleMedium&#10;                        )&#10;                    },&#10;                    selected = selected,&#10;                    onClick = {&#10;                        navController.navigate(item.route) {&#10;                            launchSingleTop = true&#10;                        }&#10;                        onCloseDrawer()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp),&#10;                    colors = NavigationDrawerItemDefaults.colors(&#10;                        selectedContainerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                        selectedIconColor = MaterialTheme.colorScheme.primary,&#10;                        selectedTextColor = MaterialTheme.colorScheme.primary&#10;                    )&#10;                )&#10;            }&#10;&#10;&#10;            Spacer(modifier = Modifier.weight(1f))&#10;&#10;            HorizontalDivider(&#10;                modifier = Modifier.padding(vertical = 8.dp),&#10;                thickness = 1.dp,&#10;                color = MaterialTheme.colorScheme.outlineVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Cabecera del Drawer - Con imagen local&#10; */&#10;@Composable&#10;fun DrawerHeader(user: User?) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(MaterialTheme.colorScheme.primary)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        // Avatar grande con imagen desde drawable&#10;        Box(&#10;            modifier = Modifier&#10;                .size(90.dp)&#10;                .clip(CircleShape)&#10;                .background(MaterialTheme.colorScheme.primary),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            // Imagen desde drawable&#10;            Image(&#10;                painter = painterResource(id = R.drawable.ic_splash_logo),&#10;                contentDescription = &quot;Avatar&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .clip(CircleShape),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;        }&#10;        Spacer(modifier = Modifier.height(5.dp))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/luisbaena/prodentclient/presentation/ui/navigation/DrawerNavItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/luisbaena/prodentclient/presentation/ui/navigation/DrawerNavItem.kt" />
              <option name="originalContent" value="package dev.luisbaena.prodentclient.presentation.ui.navigation&#10;&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material.icons.outlined.Person&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;/**&#10; * Items del Navigation Drawer&#10; */&#10;sealed class DrawerNavItem(&#10;    val route: String,&#10;    val title: String,&#10;    val selectedIcon: ImageVector,&#10;    val unselectedIcon: ImageVector,&#10;    val requiresAdmin: Boolean = false&#10;) {&#10;&#10;    // SECCIÓN DE USUARIO&#10;    object MyProfile : DrawerNavItem(&#10;        route = Routes.MyProfile,&#10;        title = &quot;Mi Perfil&quot;,&#10;        selectedIcon = Icons.Filled.Person,&#10;        unselectedIcon = Icons.Outlined.Person&#10;    )&#10;&#10;    // SECCIÓN DE ADMINISTRACIÓN&#10;    object DeleteAccount : DrawerNavItem(&#10;        route = Routes.DeleteAccount,&#10;        title = &quot;Eliminar Usuario&quot;,&#10;        selectedIcon = Icons.Filled.Delete,&#10;        unselectedIcon = Icons.Outlined.Delete,&#10;        requiresAdmin = true&#10;    )&#10;}&#10;&#10;// Lista de items del drawer (perfil)&#10;val drawerNavItems = listOf(&#10;    DrawerNavItem.MyProfile&#10;)&#10;&#10;// Lista de items de administración&#10;val adminDrawerNavItems = listOf(&#10;    DrawerNavItem.DeleteAccount&#10;)&#10;&#10;" />
              <option name="updatedContent" value="package dev.luisbaena.prodentclient.presentation.ui.navigation&#10;&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.outlined.Delete&#10;import androidx.compose.material.icons.outlined.Person&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;/**&#10; * Items del Navigation Drawer&#10; */&#10;sealed class DrawerNavItem(&#10;    val route: String,&#10;    val title: String,&#10;    val selectedIcon: ImageVector,&#10;    val unselectedIcon: ImageVector&#10;) {&#10;&#10;    object MyProfile : DrawerNavItem(&#10;        route = Routes.MyProfile,&#10;        title = &quot;Mi Perfil&quot;,&#10;        selectedIcon = Icons.Filled.Person,&#10;        unselectedIcon = Icons.Outlined.Person&#10;    )&#10;&#10;    object DeleteAccount : DrawerNavItem(&#10;        route = Routes.DeleteAccount,&#10;        title = &quot;Eliminar Cuenta&quot;,&#10;        selectedIcon = Icons.Filled.Delete,&#10;        unselectedIcon = Icons.Outlined.Delete&#10;    )&#10;}&#10;&#10;// Lista de items del drawer&#10;val drawerNavItems = listOf(&#10;    DrawerNavItem.MyProfile,&#10;    DrawerNavItem.DeleteAccount&#10;)&#10;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docs/CAMBIOS_USUARIO_UNICO.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docs/CAMBIOS_USUARIO_UNICO.md" />
              <option name="updatedContent" value="# Cambios: Sistema de Usuario Único&#10;&#10;## Fecha&#10;2025-10-31&#10;&#10;## Descripción&#10;Se ha simplificado el sistema de usuarios eliminando la distinción entre USER y ADMIN, quedando un solo tipo de usuario con acceso completo a todas las funcionalidades.&#10;&#10;## Cambios Realizados&#10;&#10;### 1. DrawerNavItem.kt&#10;- ✅ **Eliminado el parámetro `requiresAdmin`** del sealed class DrawerNavItem&#10;- ✅ **Unificadas las listas** `drawerNavItems` y `adminDrawerNavItems` en una sola lista&#10;- ✅ **Actualizado el título** &quot;Eliminar Usuario&quot; → &quot;Eliminar Cuenta&quot;&#10;- ✅ Ahora todos los usuarios tienen acceso a:&#10;  - Mi Perfil&#10;  - Eliminar Cuenta&#10;&#10;### 2. AppNavigationDrawer.kt&#10;- ✅ **Eliminado el import** de `adminDrawerNavItems`&#10;- ✅ **Eliminada la sección de &quot;ADMINISTRACIÓN&quot;** del drawer&#10;- ✅ **Unificados todos los items** en una sola lista sin separación por roles&#10;- ✅ Simplificada la UI del drawer&#10;&#10;### 3. MyProfileScreen.kt&#10;- ✅ **Eliminado el parámetro `role`** de la función ProfileHeader&#10;- ✅ **Eliminado el Badge del rol** que se mostraba bajo el nombre del usuario&#10;- ✅ **Reducida la altura del header** de 220dp a 200dp (ya no hay badge de rol)&#10;- ✅ Interfaz más limpia y simple&#10;&#10;### 4. AuthViewModel.kt&#10;- ✅ **Agregado import** de `android.util.Log` (corregido error de compilación)&#10;- ℹ️ El campo `role` del modelo User sigue existiendo pero no se utiliza en la UI&#10;&#10;## Impacto&#10;&#10;### Modelo de Datos&#10;- El modelo `User` mantiene el campo `role` por compatibilidad con el backend&#10;- El campo se guarda en preferencias pero no se utiliza para lógica de negocio&#10;&#10;### Interfaz de Usuario&#10;- **Navegación simplificada**: Un solo menú sin secciones separadas&#10;- **Perfil más limpio**: Sin badge de rol&#10;- **Acceso universal**: Todos los usuarios pueden eliminar su cuenta&#10;&#10;### Archivos No Modificados&#10;Los siguientes archivos contienen referencias al `role` pero están comentadas o no afectan la funcionalidad:&#10;- `MainActivity.kt` - Línea comentada&#10;- `AuthRepositoryImpl.kt` - Solo logging&#10;- `UserPreferences.kt` - Persistencia del campo&#10;&#10;## Estado de Compilación&#10;✅ **Sin errores de compilación**&#10;⚠️ Solo warnings menores:&#10;- Parámetro `isDrawerOpen` no utilizado en AppNavigationDrawer&#10;- Parámetro `user` no utilizado en DrawerHeader&#10;- Orden de parámetros en AppNavigationDrawer&#10;&#10;## Próximos Pasos (Opcional)&#10;Si deseas eliminar completamente el concepto de roles:&#10;1. Eliminar el campo `role` del modelo User&#10;2. Eliminar las referencias en UserPreferences&#10;3. Actualizar el backend para no enviar el campo role&#10;4. Eliminar logs relacionados con role&#10;&#10;## Resumen&#10;✨ **Sistema simplificado**: Un solo tipo de usuario&#10; **Funcionalidad completa**: Todos tienen acceso a todas las opciones&#10; **Código más limpio**: Menos condicionales y separaciones&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/limpiar_archivos_antiguos.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/limpiar_archivos_antiguos.bat" />
              <option name="updatedContent" value="@echo off&#10;echo ========================================&#10;echo   LIMPIEZA DE ARCHIVOS MARKDOWN ANTIGUOS&#10;echo ========================================&#10;echo.&#10;echo Este script eliminara los archivos Markdown antiguos de la raiz&#10;echo que ya han sido movidos y reorganizados en la carpeta docs/&#10;echo.&#10;&#10;pause&#10;&#10;echo.&#10;echo Eliminando archivos antiguos...&#10;echo.&#10;&#10;if exist VERIFICACION_TEMA_TIPOGRAFIA.md (&#10;    del VERIFICACION_TEMA_TIPOGRAFIA.md&#10;    echo [OK] VERIFICACION_TEMA_TIPOGRAFIA.md eliminado&#10;) else (&#10;    echo [--] VERIFICACION_TEMA_TIPOGRAFIA.md no existe&#10;)&#10;&#10;if exist MODULARIZACION_COMPLETADA.md (&#10;    del MODULARIZACION_COMPLETADA.md&#10;    echo [OK] MODULARIZACION_COMPLETADA.md eliminado&#10;) else (&#10;    echo [--] MODULARIZACION_COMPLETADA.md no existe&#10;)&#10;&#10;if exist RESUMEN_COMPONENTES.md (&#10;    del RESUMEN_COMPONENTES.md&#10;    echo [OK] RESUMEN_COMPONENTES.md eliminado&#10;) else (&#10;    echo [--] RESUMEN_COMPONENTES.md no existe&#10;)&#10;&#10;if exist CHECKLIST.md (&#10;    del CHECKLIST.md&#10;    echo [OK] CHECKLIST.md eliminado&#10;) else (&#10;    echo [--] CHECKLIST.md no existe&#10;)&#10;&#10;if exist PASOS_SIGUIENTES.md (&#10;    del PASOS_SIGUIENTES.md&#10;    echo [OK] PASOS_SIGUIENTES.md eliminado&#10;) else (&#10;    echo [--] PASOS_SIGUIENTES.md no existe&#10;)&#10;&#10;if exist RESUMEN_REORGANIZACION.md (&#10;    del RESUMEN_REORGANIZACION.md&#10;    echo [OK] RESUMEN_REORGANIZACION.md eliminado&#10;) else (&#10;    echo [--] RESUMEN_REORGANIZACION.md no existe&#10;)&#10;&#10;echo.&#10;echo ========================================&#10;echo   LIMPIEZA COMPLETADA&#10;echo ========================================&#10;echo.&#10;echo Los siguientes archivos se mantienen:&#10;echo - README.md (principal del proyecto)&#10;echo - RESUMEN_FINAL_COMPLETO.md (resumen de todo el trabajo)&#10;echo - docs/ (carpeta con documentacion organizada)&#10;echo.&#10;&#10;pause&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>